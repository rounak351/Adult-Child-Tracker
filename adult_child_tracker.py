# -*- coding: utf-8 -*-
"""Adult_Child Tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Al0jqchPzyBo4tDdpVAXnGZexv8WKZnh
"""

# Load the Drive helper and mount
from google.colab import drive
drive.mount('/content/drive')



# Commented out IPython magic to ensure Python compatibility.
import os
HOME = "/content/drive/MyDrive/Colab_Notebooks/Person_Detection"
print(HOME)
# %cd {HOME}

# make sure that we have access to GPU.
# We can use nvidia-smi command to do that. In case of any problems navigate to Edit -> Notebook settings -> Hardware accelerator,
# set it to GPU, and then click Save.
!nvidia-smi

# Installing required libraries
!pip install ultralytics
!pip install deep_sort_realtime
!pip install torchreid
!pip install inference supervision
!pip install roboflow
!pip install yt-dlp

# Loading required libraries
import cv2
from ultralytics import YOLO
import torch
import torchreid
from deep_sort_realtime.deepsort_tracker import DeepSort
import numpy as np
import supervision as sv
import torchvision.transforms as T
from PIL import Image

# Download dataset

from roboflow import Roboflow
rf = Roboflow(api_key="your_key")
project = rf.workspace("projects-20qd2").project("adult-child")
version = project.version(3)
dataset = version.download("yolov9")

#Downloading model weights
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/gelan-c.pt

# Commented out IPython magic to ensure Python compatibility.
## Training custom model-3
# %cd {HOME}/yolov9

!python train.py \
--batch 16 --epochs 55 --img 640 --device 0 \
--data {HOME}/Adult-Child-3/data.yaml \
--weights {HOME}/weights/gelan-c.pt \
--cfg models/detect/gelan-c.yaml \
--hyp data/hyps/hyp.scratch-high.yaml

# Commented out IPython magic to ensure Python compatibility.
# validate custom model with best weights
# %cd {HOME}

!python yolov9/val.py \
--img 640 --batch 32 --conf 0.001 --iou 0.7 \
--data {HOME}/Adult-Child-3/data.yaml \
--weights {HOME}/yolov9/runs/train/exp2/weights/best.pt

# Testing custom model on test images
!python yolov9/detect.py \
--img 1280 --conf 0.25 --device 0 \
--weights {HOME}/yolov9/runs/train/exp/weights/best.pt \
--source {dataset.location}/test/images

#Examining the results
import glob

from IPython.display import Image, display

for image_path in glob.glob(f'{HOME}/yolov9/runs/detect/exp/*.jpg')[:10]:
      display(Image(filename=image_path, width=600))

# Checking trained_model results
from IPython.display import Image

Image(filename=f"{HOME}/yolov9/runs/train/exp2/results.png", width=1000)

# Visualising confusion matrix
from IPython.display import Image

Image(filename=f"{HOME}/yolov9/runs/train/exp2/confusion_matrix.png", width=1000)

# Commented out IPython magic to ensure Python compatibility.
# Installing StrongSORT
# %cd {HOME}
!git clone --recurse-submodules  https://github.com/TheNobody-12/MOT_WITH_YOLOV9_STRONG_SORT.git
# %cd MOT_WITH_YOLOV9_STRONG_SORT
!pip install -r requirements.txt

#Downloading StrongSORT weights
!wget -P {HOME}/MOT_WITH_YOLOV9_STRONG_SORT/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-c.pt


# Run tracker
# %cd MOT_WITH_YOLOV9_STRONG_SORT
yolo_weights_path = f'{HOME}/runs/train/exp2/weights/best.pt'
strong_sort_weights_path =f'{HOME}/osnet_ain_x1_0_imagenet.pt'

!python {HOME}/MOT_WITH_YOLOV9_STRONG_SORT/trackv9.py --source {video_path} --yolo-weights {yolo_weights_path} --img 640 --strong-sort-weights {strong_sort_weights_path}